import os
import openai
import pdfplumber
import gspread
from google.oauth2.service_account import Credentials
import time
import json
from flask import Flask, render_template, request, redirect, url_for, flash
from dotenv import load_dotenv
from io import BytesIO
import logging

# === Configuración inicial ===
load_dotenv()
app = Flask(__name__)
app.secret_key = 'supersecretkey'  # Para usar mensajes flash

UPLOAD_FOLDER = 'pdf'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# === Configuración de OpenAI y Google Sheets ===
logging.basicConfig(level=logging.INFO)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEETS_SCOPES = os.getenv("GOOGLE_SHEETS_SCOPES").split(",")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
GOOGLE_SHEETS_URL = os.getenv("GOOGLE_SHEETS_URL")

openai.api_key = OPENAI_API_KEY

credentials_info = json.loads(GOOGLE_SHEETS_CREDENTIALS)
credentials = Credentials.from_service_account_info(credentials_info, scopes=GOOGLE_SHEETS_SCOPES)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_url(GOOGLE_SHEETS_URL)
worksheet = spreadsheet.sheet1

# === Función para extraer texto de PDF ===
def extract_text_from_pdf(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        if pdf.pages:
            return pdf.pages[0].extract_text()
        else:
            return ""

# === Función para extraer datos usando OpenAI ===
from openai import OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

def extract_invoice_data_using_gpt(pdf_text):
    prompt = f"""
     Extrae los siguientes campos del texto de una factura. Si un campo no existe, responde con un espacio vacío:
            1. Importe Neto Gravado en dólares (USD)
            2. Importe Neto Gravado en pesos ($)
            3. IVA 21% en dólares (USD)
            4. IVA 21% en pesos ($)
            5. Importe Otros Tributos en dólares (USD)
            6. Importe Otros Tributos en pesos ($)
            7. Importe Total en dólares (USD)
            8. Importe Total en pesos ($)
            9. Valor Total en Pesos (si la factura está en dólares y este campo existe, extraerlo; si no existe, usar el Importe Total)
            10. Número de Comprobante
            11. Fecha de Emisión
            12. CUIT del receptor (excluir "30711391963" y eliminar guiones)
            13. Razón Social del receptor (excluir "GLOBAL LOGISTICS")

            Devuelve el resultado estrictamente en formato JSON válido, sin texto adicional ni explicaciones. Por ejemplo:
            {{
                "Importe Neto Gravado (USD)": "",
                "Importe Neto Gravado ($)": "",
                "IVA 21% (USD)": "",
                "IVA 21% ($)": "",
                "Importe Otros Tributos (USD)": "",
                "Importe Otros Tributos ($)": "",
                "Importe Total (USD)": "",
                "Importe Total ($)": "",
                "Valor Total en Pesos": "",
                "Número de Comprobante": "",
                "Fecha de Emisión": "",
                "CUIT del receptor": "",
                "Razón Social del receptor": ""
            }}

            Aquí está el texto de la factura:
    {pdf_text}
    """
    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",  # Cambiado aquí
            messages=[
                {"role": "system", "content": "Eres un experto en análisis de texto y procesamiento de facturas."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=600,
    )
        content = response.choices[0].message.content
        return json.loads(content)
    except Exception as e:
        logging.error(f"Error con OpenAI: {e}")
        raise

# === Función para procesar archivo ===
def process_invoice(file_path):
    pdf_text = extract_text_from_pdf(file_path)
    extracted_data = extract_invoice_data_using_gpt(pdf_text)

    if extracted_data:
        row = [
            extracted_data["Razón Social del receptor"],
            extracted_data["CUIT del receptor"],
            extracted_data["Número de Comprobante"],
            extracted_data["Fecha de Emisión"],
            extracted_data["Importe Neto Gravado (USD)"],
            extracted_data["Importe Neto Gravado ($)"],
            extracted_data["IVA 21% (USD)"],
            extracted_data["IVA 21% ($)"],
            extracted_data["Importe Otros Tributos (USD)"],
            extracted_data["Importe Otros Tributos ($)"],
            extracted_data["Importe Total (USD)"],
            extracted_data["Importe Total ($)"],
            extracted_data["Valor Total en Pesos"]
        ]
        worksheet.append_row(row)
        logging.info(f"Datos guardados en Google Sheets: {row}")
        return True
    return False

# === Ruta principal ===
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash("No se envió ningún archivo.")
            return redirect(request.url)

        files = request.files.getlist('file')
        success_count = 0

        for file in files:
            if file.filename.lower().endswith('.pdf'):
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
                file.save(file_path)
                try:
                    if process_invoice(file_path):
                        success_count += 1
                except Exception as e:
                    logging.error(f"Error al procesar {file.filename}: {e}")
                    flash(f"Error al procesar {file.filename}: {e}")
            else:
                flash(f"Archivo no válido: {file.filename}")

        flash(f"{success_count} archivo(s) procesado(s) correctamente.")
        return redirect(url_for('index'))

    return render_template('index.html')

# === Run local ===
if __name__ == "__main__":
    if os.getenv("PRODUCTION") == "true":
        # En Railway u otro entorno productivo
        pass
    else:
        app.run(debug=True)
